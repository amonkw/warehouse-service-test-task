version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: warehouse_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-warehouse_db}
    ports:
      - "5433:5432" # Маппим на другой порт хоста, чтобы не конфликтовать с локальной БД
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-warehouse_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - warehouse_net

  redis:
    image: redis:7-alpine
    container_name: warehouse_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - warehouse_net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: warehouse_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - warehouse_net

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: warehouse_kafka
    depends_on:
      - zookeeper
    ports:
      # Доступ к Kafka снаружи контейнера (например, для локального продюсера/консьюмера)
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Адрес, который Kafka будет анонсировать клиентам Docker сети
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR:
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 #
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true' # Автосоздание топика
    networks:
      - warehouse_net

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: warehouse_app
    env_file:
      - .env.example # Загружаем переменные из .env файла
    environment:
      # Переопределяем хосты для доступа к другим сервисам внутри Docker
      POSTGRES_HOST: db
      REDIS_HOST: redis
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      # APP_MODE: kafka # Установить в 'kafka' для запуска встроенного консьюмера
      APP_MODE: webhook_only # По умолчанию вебхук
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
         condition: service_started
    ports:
      - "${APP_PORT:-8000}:8000" # Маппим порт приложения на хост
    networks:
      - warehouse_net

volumes:
  postgres_data:
  redis_data:

networks:
  warehouse_net:
    driver: bridge